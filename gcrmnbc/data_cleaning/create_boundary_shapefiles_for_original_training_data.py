import os
import re

from gcrmnbc.utils import encodings, gdal_command_line, logs, paths


_logger = logs.get_logger(__file__)


def create_sampling_boundary_shapefiles() -> None:
    raise AssertionError('This script has not been tested since being updated, be careful')
    _logger.info('Creating sampling boundary shapefiles for original UQ training data')
    _assert_encoding_assumptions_hold()
    # Get list of completed responses rasters
    tmp_filepath_reef_raster = os.path.join(paths.DIR_DATA_TRAIN_RAW, 'tmp_reef_only.tif')
    tmp_filepath_reef_outline = os.path.join(paths.DIR_DATA_TRAIN_RAW, 'tmp_reef_outline.shp')
    basename_reef_outline = os.path.splitext(os.path.basename(tmp_filepath_reef_outline))[0]
    filepaths_responses = sorted([
        os.path.join(paths.DIR_DATA_TRAIN_CLEAN, filename) for filename in os.listdir(paths.DIR_DATA_TRAIN_CLEAN)
        if filename.endswith('_responses.tif')
    ])
    for idx_responses, filepath_responses in enumerate(filepaths_responses):
        _logger.debug('Creating boundaries for response file {} of {}'.format(idx_responses, len(filepaths_responses)))
        filepath_boundary = re.sub('responses.tif', 'boundaries.shp', filepath_responses)
        if os.path.exists(filepath_boundary):
            _logger.debug('Boundary file already exists at:  {}'.format(filepath_boundary))
            continue
        _logger.debug('Creating boundary file at:  {}'.format(filepath_boundary))
        # Get raster of only reef areas
        _logger.debug('Creating reef-only raster')
        min_reef_value = min(encodings.MAPPINGS[encodings.REEF_TOP], encodings.MAPPINGS[encodings.NOT_REEF_TOP])
        command = 'gdal_calc.py -A {filepath_responses} --outfile={filepath_reef} --NoDataValue=-9999 ' + \
                  '--calc="1*(A>={min_value}) + -9999*(A<{min_value})"'
        command = command.format(
            filepath_responses=filepath_responses, filepath_reef=tmp_filepath_reef_raster, min_reef_value=min_reef_value)
        gdal_command_line.run_gdal_command(command, _logger)
        # Get shapefile of reef outline
        _logger.debug('Creating reef outline shapefile')
        command = 'gdal_polygonize.py {} {}'.format(tmp_filepath_reef_raster, tmp_filepath_reef_outline)
        gdal_command_line.run_gdal_command(command, _logger)
        # Get shapefile of sampling boundaries by buffering reef outline
        _logger.debug('Creating buffered outline for boundary file')
        command = 'ogr2ogr -f "ESRI Shapefile" {filepath_boundary} {filepath_outline} -dialect sqlite ' + \
                  '-sql "select ST_buffer(geometry, 64) as geometry from {basename_outline}"'
        command = command.format(
            filepath_boundary=filepath_boundary, filepath_outline=tmp_filepath_reef_outline,
            basename_outline=basename_reef_outline
        )
        gdal_command_line.run_gdal_command(command, _logger)
        # Clean up
        _logger.debug('Remove temporary files')
        os.remove(tmp_filepath_reef_raster)
        for filename_outline in os.listdir(paths.DIR_DATA_TRAIN_RAW):
            if not re.search(basename_reef_outline, filename_outline):
                continue
            os.remove(os.path.join(paths.DIR_DATA_TRAIN_RAW, filename_outline))


def _assert_encoding_assumptions_hold():
    """
    We'd like to get land, water, reef top, and not reef top areas for sampling. Training data is generated by sampling
    images for areas where the features and responses have enough data, but we'd also like more feature context for the
    labelled reef areas.

    We want to buffer out reef areas to get more context, but we don't really need to buffer out land or water areas
    because we'll probably get plenty adjacent to the reefs themselves. We can add in additional water or land pretty
    easily but just manually selecting large swaths of land or reef in the images themselves; e.g., here's a giant
    patch of blue water or turbid water, use that as a water class (that's probably necessary due to the format of the
    new training data, which has very little land or water selected).

    Here, we just assert that reef top and not reef top are still the classes with the greatest numbered labels after
    removing cloud-shade and unknown. The gdal_calc commands depend on this assumption.
    """
    max_other = max(encodings.MAPPINGS[encodings.LAND], encodings.MAPPINGS[encodings.WATER])
    reef_top = encodings.MAPPINGS[encodings.REEF_TOP]
    not_reef_top = encodings.MAPPINGS[encodings.NOT_REEF_TOP]
    assert reef_top > max_other and not_reef_top > max_other, 'Please see _assert_encoding_assumptions_hold for details'


if __name__ == '__main__':
    create_sampling_boundary_shapefiles()
